{"version":3,"sources":["webpack:///./src/worker/worker.ts?ba98","logo.svg","App.tsx","worker/index.ts","processData.ts","reportWebVitals.ts","index.tsx","worker/worker.ts"],"names":["module","exports","Worker","instance","App","useState","processingStatus","setProcessingStatus","data","setData","count","setCount","onClick","a","t0","performance","now","processDataWithWebWorker","processed","t1","console","log","Math","floor","className","src","logo","alt","disabled","arr","i","length","push","processData","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById","inst","wrap","f","this"],"mappings":"wOAAAA,EAAOC,QAAU,WACf,OAAO,IAAIC,OAAO,IAA0B,oC,wHCD/B,MAA0B,iC,eCOzC,IAAMC,EAAW,IAAID,E,OCJrB,GDwFeE,MAlFf,WAAgB,IAAD,EACmCC,oBAAS,GAD5C,mBACNC,EADM,KACYC,EADZ,OAEWF,mBAAwB,IAFnC,mBAENG,EAFM,KAEAC,EAFA,OAGaJ,mBAAS,GAHtB,mBAGNK,EAHM,KAGCC,EAHD,KAcPC,EAAO,uCAAG,gCAAAC,EAAA,6DACRC,EAAKC,YAAYC,MACvBT,GAAoB,GAFN,SAKUJ,EAASc,yBAAyBT,GAL5C,OAKRU,EALQ,OAOdT,EAAQS,GACRX,GAAoB,GACdY,EAAKJ,YAAYC,MACvBI,QAAQC,IAAR,0BAA+BC,KAAKC,MAAMJ,EAAKL,GAA/C,mBAVc,2CAAH,qDA0Bb,OACE,sBAAKU,UAAU,MAAf,UACE,wBAAQA,UAAU,aAAlB,SACE,qBAAKC,IAAKC,EAAMF,UAAU,WAAWG,IAAI,WAG3C,iCACE,mLAKA,8GAIA,8FAEA,8BACE,wBAAQf,QAtDA,WACdD,EAASD,EAAQ,IAqDX,mBADF,UAEUA,KAEV,gCACE,wBAAQE,QAASA,EAASgB,SAAUtB,EAApC,8CAGA,wBAAQM,QAvCU,WACxB,IAAME,EAAKC,YAAYC,MACvBT,GAAoB,GAGpB,IAAMW,EErCH,SAAqBV,GAG1B,IAFA,IAAMqB,EAAM,GAEHC,EAAI,EAAGA,EAAItB,EAAKuB,OAAS,IAAWD,IAC3CD,EAAIG,KAAJ,UAAYF,IAGd,OAAOD,EF8BaI,CAAYzB,GAE9BC,EAAQS,GACRX,GAAoB,GACpB,IAAMY,EAAKJ,YAAYC,MACvBI,QAAQC,IAAR,2BAAgCC,KAAKC,MAAMJ,EAAKL,GAAhD,oBA6B0Cc,SAAUtB,EAA9C,gDAIF,oDAAuBA,EAAmB,aAAe,UACzD,kDAAqBE,EAAKuB,UAC1B,8BACE,wBAAQnB,QAhEA,WACdH,EAAQ,IACRE,EAAS,IA8DuBiB,SAAUtB,EAApC,4BGpEK4B,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,K,kBChBA,IAAsnBc,EAAlnBC,EAAO,EAAQ,IAAWA,KAAK/C,EAAS,EAAQ,IAAukBF,EAAOC,QAAU,SAASiD,IAAK,OAAIC,gBAAgBD,EAAUD,EAAK/C,KAAiB8C,IAASA,EAAOC,EAAK/C,S","file":"static/js/main.5ab6f87d.chunk.js","sourcesContent":["module.exports = function() {\n  return new Worker(__webpack_public_path__ + \"70e36ed67664ee8a2b8b.worker.js\");\n};","export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import React, { useState } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Worker from './worker';\nimport { processData } from './processData';\n\n// Create new instance\nconst instance = new Worker();\n\nfunction App() {\n  const [processingStatus, setProcessingStatus] = useState(false);\n  const [data, setData] = useState<Array<string>>([]);\n  const [count, setCount] = useState(0);\n\n  const onCount = () => {\n    setCount(count + 1);\n  };\n\n  const onReset = () => {\n    setData([]);\n    setCount(0);\n  };\n\n  const onClick = async () => {\n    const t0 = performance.now();\n    setProcessingStatus(true);\n\n    // Use a web worker to process the data\n    const processed = await instance.processDataWithWebWorker(data);\n\n    setData(processed);\n    setProcessingStatus(false);\n    const t1 = performance.now();\n    console.log(`Web worker took ${Math.floor(t1 - t0)} milliseconds.`);\n  };\n\n  const onClickMainThread = () => {\n    const t0 = performance.now();\n    setProcessingStatus(true);\n\n    // Use main thread to process the data\n    const processed = processData(data);\n\n    setData(processed);\n    setProcessingStatus(false);\n    const t1 = performance.now();\n    console.log(`Main thread took ${Math.floor(t1 - t0)} milliseconds.`);\n  };\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n      </header>\n\n      <main>\n        <p>\n          This is a completely artificial example to compare using a web worker\n          and the main thread for processing something intensive that may hang\n          the UI.\n        </p>\n        <p>\n          Warning: You may ran out of memory depending on your PC specs, so be\n          careful!\n        </p>\n        <p>The count button is there to test the UI is still responsive.</p>\n\n        <p>\n          <button onClick={onCount}>Count</button>\n          Count: {count}\n        </p>\n        <div>\n          <button onClick={onClick} disabled={processingStatus}>\n            Click to process with web worker\n          </button>\n          <button onClick={onClickMainThread} disabled={processingStatus}>\n            Click to process on main thread\n          </button>\n        </div>\n        <p>Processing status: {processingStatus ? 'PROCESSING' : 'IDLE'}</p>\n        <p>Number of items: {data.length}</p>\n        <div>\n          <button onClick={onReset} disabled={processingStatus}>\n            Reset\n          </button>\n        </div>\n      </main>\n    </div>\n  );\n}\n\nexport default App;\n","// eslint-disable-next-line\nimport Worker from 'comlink-loader!./worker'; // inline loader\n\nexport default Worker;\n","/**\n * This is a intentionally terrible function.\n * It will add million items to the array each time.\n */\nexport function processData(data: Array<string>): Array<string> {\n  const arr = [];\n\n  for (let i = 0; i < data.length + 1_000_000; i++) {\n    arr.push(`${i}`);\n  }\n\n  return arr;\n}\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","var wrap = require('comlink').wrap,Worker = require(\"!worker-loader?{}!/home/runner/work/tutorial-create-react-app-with-web-worker-and-typescript/tutorial-create-react-app-with-web-worker-and-typescript/node_modules/comlink-loader/dist/comlink-worker-loader.js!/home/runner/work/tutorial-create-react-app-with-web-worker-and-typescript/tutorial-create-react-app-with-web-worker-and-typescript/node_modules/react-scripts/node_modules/babel-loader/lib/index.js??ref--5-oneOf-2!/home/runner/work/tutorial-create-react-app-with-web-worker-and-typescript/tutorial-create-react-app-with-web-worker-and-typescript/src/worker/worker.ts\"),inst;module.exports = function f() {if (this instanceof f) return wrap(Worker());return inst || (inst = wrap(Worker()));};"],"sourceRoot":""}